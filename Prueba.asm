// Bootstrap code
@256
D=A
@SP
M=D
// call Sys.init 0
@RET_Sys.init0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RET_Sys.init0)
// C_PUSH constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 20
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@LABEL_TRUE0
D;JLT
@SP
A=M-1
M=0
@LABEL_END0
0;JMP
(LABEL_TRUE0)
@SP
A=M-1
M=-1
(LABEL_END0)
@SP
AM=M-1
D=M
@Prueba$LESS
D;JNE
@Prueba$NOT_LESS
0;JMP
(Prueba$LESS)
// C_PUSH constant 111
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
@Prueba$CONTINUE
0;JMP
(Prueba$NOT_LESS)
// C_PUSH constant 222
@222
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
(Prueba$CONTINUE)
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call AddTwo 2
@RET_AddTwo1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@AddTwo
0;JMP
(RET_AddTwo1)
// C_POP static 0
@SP
AM=M-1
D=M
@Prueba.0
M=D
(Prueba$END)
@Prueba$END
0;JMP
// function AddTwo 0
(AddTwo)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
